@using Shared.Models

@if (ShowModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <!-- Modal Header -->
            <div class="flex items-center justify-between p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-800">Edit Skill</h3>
                <button @onclick="CloseModal" 
                        class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="mb-6">
                    <div class="flex items-center justify-center w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full">
                        <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                    </div>
                    <h4 class="text-lg font-semibold text-gray-800 text-center mb-2">Update Skill Information</h4>
                    <p class="text-sm text-gray-600 text-center">
                        Modify the skill name and level to reflect your current expertise.
                    </p>
                </div>

                <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    <!-- Skill Name -->
                    <div class="mb-4">
                        <label for="skillName" class="block text-sm font-medium text-gray-700 mb-2">
                            Skill Name *
                        </label>
                        <input type="text" 
                               id="skillName"
                               @bind="localSkillName" 
                               @bind:event="oninput"
                               placeholder="e.g., React, C#, Python"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                               maxlength="100"
                               required />
                        <div class="text-xs text-gray-500 mt-1">
                            @localSkillName.Length/100 characters
                        </div>
                    </div>

                    <!-- Skill Level -->
                    <div class="mb-6">
                        <label for="skillLevel" class="block text-sm font-medium text-gray-700 mb-2">
                            Skill Level *
                        </label>
                        <select id="skillLevel"
                                @bind="localSkillLevel" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                                required>
                            <option value="">Select skill level</option>
                            <option value="Beginner">Beginner</option>
                            <option value="Novice">Novice</option>
                            <option value="Intermediate">Intermediate</option>
                            <option value="Advanced">Advanced</option>
                            <option value="Expert">Expert</option>
                            <option value="Master">Master</option>
                        </select>
                        
                        <!-- Level Preview -->
                        @if (!string.IsNullOrEmpty(localSkillLevel))
                        {
                            <div class="mt-3 p-3 bg-gray-50 rounded-lg">
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-sm font-medium text-gray-700">@localSkillLevel</span>
                                    <span class="text-sm text-gray-500">@GetProgressPercentage(localSkillLevel)%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="h-2 rounded-full transition-all duration-500 @GetProgressBarColor(localSkillLevel)" 
                                         style="width: @GetProgressPercentage(localSkillLevel)%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </form>
            </div>

            <!-- Modal Footer -->
            <div class="flex items-center justify-end gap-3 p-6 border-t border-gray-200 bg-gray-50 rounded-b-2xl">
                <button @onclick="CloseModal" 
                        class="px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                    Cancel
                </button>
                <button @onclick="HandleSubmit" 
                        disabled="@(string.IsNullOrWhiteSpace(localSkillName) || string.IsNullOrWhiteSpace(localSkillLevel) || isSubmitting)"
                        class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200 flex items-center">
                    @if (isSubmitting)
                    {
                        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Updating...</span>
                    }
                    else
                    {
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <span>Update Skill</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Skill> OnSubmit { get; set; }
    [Parameter] public Skill? SkillToEdit { get; set; }

    private string localSkillName = string.Empty;
    private string localSkillLevel = string.Empty;
    private bool isSubmitting = false;

    protected override void OnParametersSet()
    {
        if (SkillToEdit != null)
        {
            localSkillName = SkillToEdit.Name;
            localSkillLevel = SkillToEdit.Level;
        }
        else
        {
            localSkillName = string.Empty;
            localSkillLevel = string.Empty;
        }
    }

    private async Task CloseModal()
    {
        localSkillName = string.Empty;
        localSkillLevel = string.Empty;
        isSubmitting = false;
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || !OnSubmit.HasDelegate || SkillToEdit == null)
        {
            return;
        }

        isSubmitting = true;
        try
        {
            var updatedSkill = new Skill
            {
                Id = SkillToEdit.Id,
                Name = localSkillName.Trim(),
                Level = localSkillLevel,
                PortfolioUserId = SkillToEdit.PortfolioUserId
            };

            await OnSubmit.InvokeAsync(updatedSkill);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private string GetProgressBarColor(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => "bg-gradient-to-r from-red-400 to-red-500",
            "novice" => "bg-gradient-to-r from-orange-400 to-orange-500",
            "intermediate" => "bg-gradient-to-r from-yellow-400 to-yellow-500",
            "advanced" => "bg-gradient-to-r from-blue-400 to-blue-500",
            "expert" => "bg-gradient-to-r from-green-400 to-green-500",
            "master" => "bg-gradient-to-r from-purple-400 to-purple-500",
            _ => "bg-gradient-to-r from-gray-400 to-gray-500"
        };
    }

    private int GetProgressPercentage(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => 20,
            "novice" => 35,
            "intermediate" => 50,
            "advanced" => 70,
            "expert" => 85,
            "master" => 100,
            _ => 0
        };
    }
}
