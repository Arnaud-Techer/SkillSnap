@using Shared.Models

@if (ShowModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
            <!-- Modal Header -->
            <div class="flex items-center justify-between p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-800">Edit Project</h3>
                <button @onclick="CloseModal" 
                        class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="mb-6">
                    <div class="flex items-center justify-center w-16 h-16 mx-auto mb-4 bg-green-100 rounded-full">
                        <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                    </div>
                    <h4 class="text-lg font-semibold text-gray-800 text-center mb-2">Update Project Information</h4>
                    <p class="text-sm text-gray-600 text-center">
                        Modify the project details to better showcase your work.
                    </p>
                </div>

                <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    <!-- Project Title -->
                    <div class="mb-4">
                        <label for="projectTitle" class="block text-sm font-medium text-gray-700 mb-2">
                            Project Title *
                        </label>
                        <input type="text" 
                               id="projectTitle"
                               @bind="localProjectTitle" 
                               @bind:event="oninput"
                               placeholder="e.g., E-Commerce Platform, Task Management App"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200"
                               maxlength="200"
                               required />
                        <div class="text-xs text-gray-500 mt-1">
                            @localProjectTitle.Length/200 characters
                        </div>
                    </div>

                    <!-- Project Description -->
                    <div class="mb-4">
                        <label for="projectDescription" class="block text-sm font-medium text-gray-700 mb-2">
                            Project Description *
                        </label>
                        <textarea id="projectDescription"
                                  @bind="localProjectDescription" 
                                  @bind:event="oninput"
                                  placeholder="Describe your project, technologies used, and key features..."
                                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200 resize-none"
                                  rows="4"
                                  maxlength="1000"
                                  required></textarea>
                        <div class="text-xs text-gray-500 mt-1">
                            @localProjectDescription.Length/1000 characters
                        </div>
                    </div>

                    <!-- Project Image URL -->
                    <div class="mb-6">
                        <label for="projectImageUrl" class="block text-sm font-medium text-gray-700 mb-2">
                            Project Image URL
                        </label>
                        <input type="url" 
                               id="projectImageUrl"
                               @bind="localProjectImageUrl" 
                               @bind:event="oninput"
                               placeholder="https://example.com/project-image.jpg"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200"
                               maxlength="500" />
                        <div class="text-xs text-gray-500 mt-1">
                            Optional: URL to a project screenshot or demo image
                        </div>
                        
                        <!-- Image Preview -->
                        @if (!string.IsNullOrWhiteSpace(localProjectImageUrl))
                        {
                            <div class="mt-3">
                                <div class="text-xs text-gray-600 mb-2">Preview:</div>
                                <div class="w-full h-32 bg-gray-100 rounded-lg overflow-hidden">
                                    <img src="@localProjectImageUrl" 
                                         alt="Project preview" 
                                         class="w-full h-full object-cover"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                    <div class="w-full h-full bg-gray-200 flex items-center justify-center text-gray-500 text-sm" style="display: none;">
                                        Invalid image URL
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </form>
            </div>

            <!-- Modal Footer -->
            <div class="flex items-center justify-end gap-3 p-6 border-t border-gray-200 bg-gray-50 rounded-b-2xl">
                <button @onclick="CloseModal" 
                        class="px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                    Cancel
                </button>
                <button @onclick="HandleSubmit" 
                        disabled="@(string.IsNullOrWhiteSpace(localProjectTitle) || string.IsNullOrWhiteSpace(localProjectDescription) || isSubmitting)"
                        class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200 flex items-center">
                    @if (isSubmitting)
                    {
                        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Updating...</span>
                    }
                    else
                    {
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <span>Update Project</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Project> OnSubmit { get; set; }
    [Parameter] public Project? ProjectToEdit { get; set; }

    private string localProjectTitle = string.Empty;
    private string localProjectDescription = string.Empty;
    private string localProjectImageUrl = string.Empty;
    private bool isSubmitting = false;

    protected override void OnParametersSet()
    {
        if (ProjectToEdit != null)
        {
            localProjectTitle = ProjectToEdit.Title;
            localProjectDescription = ProjectToEdit.Description;
            localProjectImageUrl = ProjectToEdit.ImageUrl ?? string.Empty;
        }
        else
        {
            localProjectTitle = string.Empty;
            localProjectDescription = string.Empty;
            localProjectImageUrl = string.Empty;
        }
    }

    private async Task CloseModal()
    {
        localProjectTitle = string.Empty;
        localProjectDescription = string.Empty;
        localProjectImageUrl = string.Empty;
        isSubmitting = false;
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || !OnSubmit.HasDelegate || ProjectToEdit == null)
        {
            return;
        }

        isSubmitting = true;
        try
        {
            var updatedProject = new Project
            {
                Id = ProjectToEdit.Id,
                Title = localProjectTitle.Trim(),
                Description = localProjectDescription.Trim(),
                ImageUrl = string.IsNullOrWhiteSpace(localProjectImageUrl) ? null : localProjectImageUrl.Trim(),
                PortfolioUserId = ProjectToEdit.PortfolioUserId
            };

            await OnSubmit.InvokeAsync(updatedProject);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
