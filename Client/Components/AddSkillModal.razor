@using Shared.Models

<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" @onclick="OnClose">
    <div class="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden" @onclick:stopPropagation="true">
        <div class="bg-gradient-to-r from-purple-500 to-pink-600 p-6 text-white">
            <div class="flex items-center justify-between">
                <h3 class="text-2xl font-bold flex items-center">
                    <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                    </svg>
                    Add New Skill
                </h3>
                <button @onclick="OnClose" class="text-white hover:text-gray-200 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="p-6">
            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Skill Name *</label>
                        <input type="text" @bind="localSkillName" 
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                               placeholder="e.g., JavaScript, React, Python, etc."
                               required />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Skill Level *</label>
                        <select @bind="localSkillLevel" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                required>
                            <option value="">Select your skill level</option>
                            <option value="Beginner">Beginner</option>
                            <option value="Novice">Novice</option>
                            <option value="Intermediate">Intermediate</option>
                            <option value="Advanced">Advanced</option>
                            <option value="Expert">Expert</option>
                            <option value="Master">Master</option>
                        </select>
                    </div>
                </div>

                <div class="flex justify-end space-x-4 mt-6 pt-4 border-t border-gray-200">
                    <button type="button" @onclick="OnClose" 
                            class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-lg hover:from-purple-600 hover:to-pink-700 transition-all duration-200">
                        Add Skill
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string name, string level)> OnSubmit { get; set; }

    // Local variables for form inputs
    private string localSkillName = string.Empty;
    private string localSkillLevel = string.Empty;

    private bool isSubmitting = false;

    private async Task HandleSubmit()
    {
        if (isSubmitting || !OnSubmit.HasDelegate)
        {
            return;
        }

        isSubmitting = true;
        try
        {
            await OnSubmit.InvokeAsync((localSkillName, localSkillLevel));
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
