@using Shared.Models
@using Client.Models

<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" @onclick="OnClose">
    <div class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden" @onclick:stopPropagation="true">
        <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-6 text-white">
            <div class="flex items-center justify-between">
                <h3 class="text-2xl font-bold flex items-center">
                    <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Create New Portfolio
                </h3>
                <button @onclick="OnClose" class="text-white hover:text-gray-200 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="p-6 max-h-[70vh] overflow-y-auto">
            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <!-- Portfolio Information -->
                <div class="space-y-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Name *</label>
                        <input type="text" @bind="localPortfolioName" 
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                               placeholder="Enter your full name"
                               required />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Bio *</label>
                        <textarea @bind="localPortfolioBio" 
                                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 resize-none"
                                  rows="4"
                                  placeholder="Tell us about yourself, your experience, and what makes you unique..."
                                  minlength="20"
                                  maxlength="500"
                                  required></textarea>
                        <div class="text-sm text-gray-500 mt-1">
                            @localPortfolioBio.Length / 500 characters (minimum 20)
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Profile Image URL</label>
                        <input type="url" @bind="localPortfolioImageUrl" 
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                               placeholder="https://example.com/your-photo.jpg" />
                    </div>
                </div>

                <!-- Projects and Skills Preview -->
                <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Projects Section -->
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="text-lg font-semibold text-gray-800">Projects (@PendingProjects.Count)</h4>
                            <button type="button" @onclick="OnAddProject" 
                                    class="bg-green-500 text-white px-3 py-2 rounded-lg text-sm hover:bg-green-600 transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Project
                            </button>
                        </div>
                        
                        @if (PendingProjects.Any())
                        {
                            <div class="space-y-2">
                                @foreach (var project in PendingProjects)
                                {
                                    <div class="bg-white rounded-lg p-3 border border-gray-200">
                                        <h5 class="font-medium text-gray-800">@project.Title</h5>
                                        <p class="text-sm text-gray-600 line-clamp-2">@project.Description</p>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500 text-sm">No projects added yet</p>
                        }
                    </div>

                    <!-- Skills Section -->
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="text-lg font-semibold text-gray-800">Skills (@PendingSkills.Count)</h4>
                            <button type="button" @onclick="OnAddSkill" 
                                    class="bg-purple-500 text-white px-3 py-2 rounded-lg text-sm hover:bg-purple-600 transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Skill
                            </button>
                        </div>
                        
                        @if (PendingSkills.Any())
                        {
                            <div class="space-y-2">
                                @foreach (var skill in PendingSkills)
                                {
                                    <div class="bg-white rounded-lg p-3 border border-gray-200">
                                        <div class="flex items-center justify-between">
                                            <span class="font-medium text-gray-800">@skill.Name</span>
                                            <span class="text-xs px-2 py-1 rounded-full @GetLevelColor(skill.Level)">@skill.Level</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500 text-sm">No skills added yet</p>
                        }
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-4 mt-8 pt-6 border-t border-gray-200">
                    <button type="button" @onclick="OnClose" 
                            class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105">
                        Create Portfolio
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Project> PendingProjects { get; set; } = new();
    [Parameter] public List<Skill> PendingSkills { get; set; } = new();
    
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string name, string bio, string imageUrl)> OnSubmit { get; set; }
    [Parameter] public EventCallback OnAddProject { get; set; }
    [Parameter] public EventCallback OnAddSkill { get; set; }

    // Local variables for form inputs
    private string localPortfolioName = string.Empty;
    private string localPortfolioBio = string.Empty;
    private string localPortfolioImageUrl = string.Empty;

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync((localPortfolioName, localPortfolioBio, localPortfolioImageUrl));
        }
    }

    private string GetLevelColor(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => "bg-red-100 text-red-800",
            "novice" => "bg-orange-100 text-orange-800",
            "intermediate" => "bg-yellow-100 text-yellow-800",
            "advanced" => "bg-blue-100 text-blue-800",
            "expert" => "bg-green-100 text-green-800",
            "master" => "bg-purple-100 text-purple-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}
