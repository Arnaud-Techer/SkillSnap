@page "/portfolio"
@using Shared.Models
@using Client.Components
@using Client.Models
@using Client.ViewModels
@using Client.Services
@inject PortfolioUserViewModel PortfolioUserViewModel
@inject SkillViewModel SkillViewModel
@inject ProjectViewModel ProjectViewModel
@inject StatisticsRefreshService StatisticsRefreshService

<PageTitle>Portfolio - SkillSnap</PageTitle>

<div class="bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 min-h-screen">
    <!-- Header Section -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-6 py-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Portfolio Showcase</h1>
                    <p class="text-gray-600 mt-1">Discover amazing developers and their incredible work</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="OpenAddPortfolioModal" class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-2 rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105">
                        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Portfolio
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-6 py-8">

        @if (PortfolioUserViewModel.ErrorMessage != null)
        {
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4">
                <strong>Debug:</strong> ErrorMessage = "@PortfolioUserViewModel.ErrorMessage"
            </div>
        }
        
        @if (PortfolioUserViewModel.IsLoading)
        {
            <div class="flex justify-center items-center py-16">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span class="ml-3 text-lg text-gray-600">Loading portfolios...</span>
            </div>
        }
        else if (!string.IsNullOrEmpty(PortfolioUserViewModel.ErrorMessage))
        {
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <div class="text-red-600 mb-2">
                    <svg class="w-8 h-8 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-red-800 mb-2">Error Loading Portfolios</h3>
                <p class="text-red-600 mb-4">@PortfolioUserViewModel.ErrorMessage</p>
                <button @onclick="ReloadPortfolios" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                    Try Again
                </button>
            </div>
        }
        else if (PortfolioUserViewModel.PortfolioUsers != null && PortfolioUserViewModel.PortfolioUsers.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                @foreach (var user in PortfolioUserViewModel.PortfolioUsers)
                {
                    <ProfileCard 
                        User="user"
                        OnViewSkills="ViewFullSkills"
                        OnViewProjects="ViewFullProjects"
                        OnContact="ContactDeveloper" />
                }
            </div>
        }
        else
        {
            <div class="text-center py-16">
                <div class="bg-gray-100 rounded-full w-32 h-32 flex items-center justify-center mx-auto mb-8">
                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                </div>
                <h2 class="text-3xl font-bold text-gray-700 mb-4">No portfolios found</h2>
                <p class="text-gray-500 mb-8 max-w-md mx-auto">
                    Be the first to showcase your amazing work! Create your portfolio and let others discover your incredible projects and skills.
                </p>
                <button class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-8 py-4 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105">
                    Create Your Portfolio
                </button>
            </div>
        }
    </div>
    @if (showSkillsModal)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" @onclick="CloseSkillsModal">
            <div class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden" @onclick:stopPropagation="true">
                <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-6 text-white">
                    <div class="flex items-center justify-between">
                        <h3 class="text-2xl font-bold flex items-center">
                            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                            </svg>
                            Skills & Expertise
                        </h3>
                        <button @onclick="CloseSkillsModal" class="text-white hover:text-gray-200 transition-colors">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="p-6 max-h-[70vh] overflow-y-auto">
                    @if (SkillViewModel.IsLoading)
                    {
                        <div class="flex justify-center items-center py-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                            <span class="ml-3 text-gray-600">Loading skills...</span>
                        </div>
                    }
                    else
                    {
                        <SkillTags Skills="SkillViewModel.Skills?.ToList()" OnAddSkill="OpenAddSkillToExistingModal" />
                    }
                </div>
            </div>
        </div>
    }

    @if (showProjectsModal)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" @onclick="CloseProjectsModal">
            <div class="bg-white rounded-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden" @onclick:stopPropagation="true">
                <div class="bg-gradient-to-r from-green-500 to-blue-600 p-6 text-white">
                    <div class="flex items-center justify-between">
                        <h3 class="text-2xl font-bold flex items-center">
                            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            Featured Projects
                        </h3>
                        <button @onclick="CloseProjectsModal" class="text-white hover:text-gray-200 transition-colors">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="p-6 max-h-[70vh] overflow-y-auto">
                    @if (ProjectViewModel.IsLoading)
                    {
                        <div class="flex justify-center items-center py-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                            <span class="ml-3 text-gray-600">Loading projects...</span>
                        </div>
                    }
                    else
                    {
                        <ProjectList Projects="ProjectViewModel.Projects?.ToList()" OnAddProject="OpenAddProjectToExistingModal" />
                    }
                </div>
            </div>
        </div>
    }

    <!-- Add Portfolio Modal -->
    @if (showAddPortfolioModal)
    {
        <AddPortfolioModal 
            PendingProjects="pendingProjects"
            PendingSkills="pendingSkills"
            OnClose="CloseAddPortfolioModal"
            OnSubmit="HandlePortfolioSubmit"
            OnAddProject="OpenAddProjectModal"
            OnAddSkill="OpenAddSkillModal" />
    }

    <!-- Add Project Modal -->
    @if (showAddProjectModal)
    {
        <AddProjectModal 
            OnClose="CloseAddProjectModal"
            OnSubmit="HandleProjectSubmit" />
    }

    <!-- Add Skill Modal -->
    @if (showAddSkillModal)
    {
        <AddSkillModal 
            OnClose="CloseAddSkillModal"
            OnSubmit="HandleSkillSubmit" />
    }

    <!-- Add Project to Existing Portfolio Modal -->
    @if (showAddProjectToExistingModal)
    {
        <AddProjectModal 
            OnClose="CloseAddProjectToExistingModal"
            OnSubmit="HandleAddProjectToExisting" />
    }

    <!-- Add Skill to Existing Portfolio Modal -->
    @if (showAddSkillToExistingModal)
    {
        <AddSkillModal 
            OnClose="CloseAddSkillToExistingModal"
            OnSubmit="HandleAddSkillToExisting" />
    }
</div>

@code {
    private bool showSkillsModal = false;
    private bool showProjectsModal = false;
    private bool showAddPortfolioModal = false;
    private bool showAddProjectModal = false;
    private bool showAddSkillModal = false;
    private bool showAddProjectToExistingModal = false;
    private bool showAddSkillToExistingModal = false;
    private int selectedUserId = 0;
    private bool isAddingProject = false;
    private bool isAddingSkill = false;

    // Portfolio creation form
    private List<Project> pendingProjects = new();
    private List<Skill> pendingSkills = new();


    protected override async Task OnInitializedAsync()
    {
        await PortfolioUserViewModel.LoadPortfolioUsersAsync();
        LogViewModelState();
    }

    private void LogViewModelState()
    {
        Console.WriteLine($"=== PortfolioUserViewModel State ===");
        Console.WriteLine($"IsLoading: {PortfolioUserViewModel.IsLoading}");
        Console.WriteLine($"ErrorMessage: '{PortfolioUserViewModel.ErrorMessage}'");
        Console.WriteLine($"PortfolioUsers Count: {PortfolioUserViewModel.PortfolioUsers?.Count() ?? 0}");
        Console.WriteLine($"PortfolioUsers IsNull: {PortfolioUserViewModel.PortfolioUsers == null}");
        Console.WriteLine($"=====================================");
    }

    // Modal control methods
    private void OpenAddPortfolioModal()
    {
        showAddPortfolioModal = true;
        StateHasChanged();
    }

    private void CloseAddPortfolioModal()
    {
        showAddPortfolioModal = false;
        ResetPortfolioForm();
        StateHasChanged();
    }

    private void OpenAddProjectModal()
    {
        showAddProjectModal = true;
        StateHasChanged();
    }

    private void CloseAddProjectModal()
    {
        showAddProjectModal = false;
        StateHasChanged();
    }

    private void OpenAddSkillModal()
    {
        showAddSkillModal = true;
        StateHasChanged();
    }

    private void CloseAddSkillModal()
    {
        showAddSkillModal = false;
        StateHasChanged();
    }

    // Modal control methods for existing portfolios
    private void OpenAddProjectToExistingModal()
    {
        showAddProjectToExistingModal = true;
        StateHasChanged();
    }

    private void CloseAddProjectToExistingModal()
    {
        showAddProjectToExistingModal = false;
        StateHasChanged();
    }

    private void OpenAddSkillToExistingModal()
    {
        showAddSkillToExistingModal = true;
        StateHasChanged();
    }

    private void CloseAddSkillToExistingModal()
    {
        showAddSkillToExistingModal = false;
        StateHasChanged();
    }

    private void ResetPortfolioForm()
    {
        pendingProjects.Clear();
        pendingSkills.Clear();
    }

    private void HandleProjectSubmit((string title, string description, string imageUrl) formData)
    {
        if (!string.IsNullOrWhiteSpace(formData.title) && !string.IsNullOrWhiteSpace(formData.description))
        {
            var project = new Project
            {
                Title = formData.title,
                Description = formData.description,
                ImageUrl = string.IsNullOrWhiteSpace(formData.imageUrl) ? null : formData.imageUrl
            };
            
            pendingProjects.Add(project);
            CloseAddProjectModal();
            StateHasChanged();
        }
    }

    private void HandleSkillSubmit((string name, string level) formData)
    {
        if (!string.IsNullOrWhiteSpace(formData.name) && !string.IsNullOrWhiteSpace(formData.level))
        {
            var skill = new Skill
            {
                Name = formData.name,
                Level = formData.level
            };
            
            pendingSkills.Add(skill);
            CloseAddSkillModal();
            StateHasChanged();
        }
    }

    // Handlers for adding to existing portfolios
    private async Task HandleAddProjectToExisting((string title, string description, string imageUrl) formData)
    {
        // Prevent multiple simultaneous submissions
        if (isAddingProject || string.IsNullOrWhiteSpace(formData.title) || string.IsNullOrWhiteSpace(formData.description) || selectedUserId <= 0)
        {
            return;
        }

        isAddingProject = true;
        
        try
        {
            var project = new Project
            {
                Title = formData.title,
                Description = formData.description,
                ImageUrl = string.IsNullOrWhiteSpace(formData.imageUrl) ? null : formData.imageUrl,
                PortfolioUserId = selectedUserId
            };

            await ProjectViewModel.CreateProjectAsync(project);
            
            // Close modal first to prevent re-rendering issues
            CloseAddProjectToExistingModal();
            
            // Refresh the projects for this user
            await ProjectViewModel.LoadProjectsByUserAsync(selectedUserId);
            
            // Refresh the main portfolio list to update counters
            Console.WriteLine($"Refreshing portfolio list after adding project to user {selectedUserId}");
            await PortfolioUserViewModel.LoadPortfolioUsersAsync();
            
            // Refresh navigation statistics
            StatisticsRefreshService.NotifyStatisticsChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding project to existing portfolio: {ex.Message}");
        }
        finally
        {
            isAddingProject = false;
        }
    }

    private async Task HandleAddSkillToExisting((string name, string level) formData)
    {
        // Prevent multiple simultaneous submissions
        if (isAddingSkill || string.IsNullOrWhiteSpace(formData.name) || string.IsNullOrWhiteSpace(formData.level) || selectedUserId <= 0)
        {
            return;
        }

        isAddingSkill = true;
        
        try
        {
            var skill = new Skill
            {
                Name = formData.name,
                Level = formData.level,
                PortfolioUserId = selectedUserId
            };

            await SkillViewModel.CreateSkillAsync(skill);
            
            // Close modal first to prevent re-rendering issues
            CloseAddSkillToExistingModal();
            
            // Refresh the skills for this user
            await SkillViewModel.LoadSkillsByUserAsync(selectedUserId);
            
            // Refresh the main portfolio list to update counters
            Console.WriteLine($"Refreshing portfolio list after adding skill to user {selectedUserId}");
            await PortfolioUserViewModel.LoadPortfolioUsersAsync();
            
            // Refresh navigation statistics
            StatisticsRefreshService.NotifyStatisticsChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding skill to existing portfolio: {ex.Message}");
        }
        finally
        {
            isAddingSkill = false;
        }
    }

    private async Task HandlePortfolioSubmit((string name, string bio, string imageUrl) formData)
    {
        // Validate form
        if (string.IsNullOrWhiteSpace(formData.name) || 
            string.IsNullOrWhiteSpace(formData.bio) || 
            formData.bio.Length < 20)
        {
            return; // Form validation will handle this
        }

        try
        {
            // Create portfolio user
            var portfolioUser = new PortfolioUser
            {
                Name = formData.name,
                Bio = formData.bio,
                ProfileImageUrl = string.IsNullOrWhiteSpace(formData.imageUrl) ? null : formData.imageUrl
            };

            var createdUser = await PortfolioUserViewModel.CreatePortfolioUserAsync(portfolioUser);
            
            if (createdUser != null)
            {
                // Add projects
                foreach (var project in pendingProjects)
                {
                    project.PortfolioUserId = createdUser.Id;
                    await ProjectViewModel.CreateProjectAsync(project);
                }

                // Add skills
                foreach (var skill in pendingSkills)
                {
                    skill.PortfolioUserId = createdUser.Id;
                    await SkillViewModel.CreateSkillAsync(skill);
                }

                // Close modal and reset form
                CloseAddPortfolioModal();
                
                // Refresh the portfolio list
                await PortfolioUserViewModel.LoadPortfolioUsersAsync();
                
                // Refresh navigation statistics
                StatisticsRefreshService.NotifyStatisticsChanged();
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating portfolio: {ex.Message}");
            // You could add error handling here
        }
    }

    private async Task ViewFullSkills(int userId)
    {
        selectedUserId = userId;
        showSkillsModal = true;
        await SkillViewModel.LoadSkillsByUserAsync(userId);
        StateHasChanged();
    }

    private async Task ViewFullProjects(int userId)
    {
        selectedUserId = userId;
        showProjectsModal = true;
        await ProjectViewModel.LoadProjectsByUserAsync(userId);
        StateHasChanged();
    }

    private void ContactDeveloper(PortfolioUserSummary user)
    {
        // TODO: Implement contact functionality
        // This could open a contact form, email client, or redirect to a contact page
        Console.WriteLine($"Contacting developer: {user.Name}");
    }

    private void CloseSkillsModal()
    {
        showSkillsModal = false;
        SkillViewModel.ClearError();
        StateHasChanged();
    }

    private void CloseProjectsModal()
    {
        showProjectsModal = false;
        ProjectViewModel.ClearError();
        StateHasChanged();
    }

    private async Task ReloadPortfolios()
    {
        Console.WriteLine("=== Reloading Portfolios ===");
        PortfolioUserViewModel.ClearError();
        await PortfolioUserViewModel.LoadPortfolioUsersAsync();
        LogViewModelState();
        StateHasChanged();
    }


    private string GetLevelColor(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => "bg-red-100 text-red-800",
            "novice" => "bg-orange-100 text-orange-800",
            "intermediate" => "bg-yellow-100 text-yellow-800",
            "advanced" => "bg-blue-100 text-blue-800",
            "expert" => "bg-green-100 text-green-800",
            "master" => "bg-purple-100 text-purple-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetProgressBarColor(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => "bg-gradient-to-r from-red-400 to-red-500",
            "novice" => "bg-gradient-to-r from-orange-400 to-orange-500",
            "intermediate" => "bg-gradient-to-r from-yellow-400 to-yellow-500",
            "advanced" => "bg-gradient-to-r from-blue-400 to-blue-500",
            "expert" => "bg-gradient-to-r from-green-400 to-green-500",
            "master" => "bg-gradient-to-r from-purple-400 to-purple-500",
            _ => "bg-gradient-to-r from-gray-400 to-gray-500"
        };
    }

    private int GetProgressPercentage(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => 20,
            "novice" => 35,
            "intermediate" => 50,
            "advanced" => 70,
            "expert" => 85,
            "master" => 100,
            _ => 0
        };
    }
}
