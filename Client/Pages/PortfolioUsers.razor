@page "/portfolio"
@using Shared.Models
@using Client.Components
@using Client.Models
@using Client.ViewModels
@inject PortfolioUserViewModel PortfolioUserViewModel
@inject SkillViewModel SkillViewModel
@inject ProjectViewModel ProjectViewModel

<PageTitle>Portfolio - SkillSnap</PageTitle>

<div class="bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 min-h-screen">
    <!-- Header Section -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-6 py-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Portfolio Showcase</h1>
                    <p class="text-gray-600 mt-1">Discover amazing developers and their incredible work</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-2 rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105">
                        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Portfolio
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-6 py-8">

        @if (PortfolioUserViewModel.ErrorMessage != null)
        {
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4">
                <strong>Debug:</strong> ErrorMessage = "@PortfolioUserViewModel.ErrorMessage"
            </div>
        }
        
        @if (PortfolioUserViewModel.IsLoading)
        {
            <div class="flex justify-center items-center py-16">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span class="ml-3 text-lg text-gray-600">Loading portfolios...</span>
            </div>
        }
        else if (!string.IsNullOrEmpty(PortfolioUserViewModel.ErrorMessage))
        {
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <div class="text-red-600 mb-2">
                    <svg class="w-8 h-8 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-red-800 mb-2">Error Loading Portfolios</h3>
                <p class="text-red-600 mb-4">@PortfolioUserViewModel.ErrorMessage</p>
                <button @onclick="ReloadPortfolios" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                    Try Again
                </button>
            </div>
        }
        else if (PortfolioUserViewModel.PortfolioUsers != null && PortfolioUserViewModel.PortfolioUsers.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                @foreach (var user in PortfolioUserViewModel.PortfolioUsers)
                {
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1">
                        <!-- User Profile Card -->
                        <div class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 p-6">
                            <div class="text-center">
                                <!-- Profile Image -->
                                <div class="relative inline-block mb-4">
                                    <img src="@(string.IsNullOrEmpty(user.ProfileImageUrl) ? "https://via.placeholder.com/120x120/6366f1/ffffff?text=ðŸ‘¤" : user.ProfileImageUrl)" 
                                         alt="@user.Name's profile picture" 
                                         class="w-24 h-24 rounded-full border-4 border-white shadow-2xl object-cover" />
                                    <div class="absolute -bottom-1 -right-1 w-6 h-6 bg-green-500 rounded-full border-2 border-white flex items-center justify-center">
                                        <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                </div>
                                
                                <!-- User Info -->
                                <h2 class="text-2xl font-bold text-white mb-2">@user.Name</h2>
                                <p class="text-blue-100 text-sm leading-relaxed mb-4">@user.Bio</p>
                                
                                <!-- Stats -->
                                <div class="flex justify-center space-x-6 mb-6">
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-white">@user.ProjectCount</div>
                                        <div class="text-xs text-blue-100 uppercase tracking-wide">Projects</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-white">@user.SkillCount</div>
                                        <div class="text-xs text-blue-100 uppercase tracking-wide">Skills</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="p-6 space-y-3">
                            <button @onclick="() => ViewFullSkills(user.Id)" 
                                    class="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-3 rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                </svg>
                                View Full Skills (@user.SkillCount)
                            </button>
                            
                            <button @onclick="() => ViewFullProjects(user.Id)" 
                                    class="w-full bg-gradient-to-r from-green-500 to-blue-600 text-white px-4 py-3 rounded-lg font-medium hover:from-green-600 hover:to-blue-700 transition-all duration-200 transform hover:scale-105 flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                                View Full Projects (@user.ProjectCount)
                            </button>
                            
                            <button @onclick="() => ContactDeveloper(user)" 
                                    class="w-full border-2 border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium hover:bg-gray-50 transition-all duration-200 flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                                Contact Developer
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-16">
                <div class="bg-gray-100 rounded-full w-32 h-32 flex items-center justify-center mx-auto mb-8">
                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                </div>
                <h2 class="text-3xl font-bold text-gray-700 mb-4">No portfolios found</h2>
                <p class="text-gray-500 mb-8 max-w-md mx-auto">
                    Be the first to showcase your amazing work! Create your portfolio and let others discover your incredible projects and skills.
                </p>
                <button class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-8 py-4 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105">
                    Create Your Portfolio
                </button>
            </div>
        }
    </div>
    @if (showSkillsModal)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
                <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-6 text-white">
                    <div class="flex items-center justify-between">
                        <h3 class="text-2xl font-bold flex items-center">
                            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                            </svg>
                            Skills & Expertise
                        </h3>
                        <button @onclick="CloseSkillsModal" class="text-white hover:text-gray-200 transition-colors">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="p-6 max-h-[70vh] overflow-y-auto">
                    @if (SkillViewModel.IsLoading)
                    {
                        <div class="flex justify-center items-center py-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                            <span class="ml-3 text-gray-600">Loading skills...</span>
                        </div>
                    }
                    else if (SkillViewModel.Skills?.Any() == true)
                    {
                        <div class="space-y-4">
                            @foreach (var skill in SkillViewModel.Skills)
                            {
                                <div class="bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors duration-200">
                                    <div class="flex items-center justify-between mb-2">
                                        <h4 class="font-semibold text-gray-800 text-lg">@skill.Name</h4>
                                        <span class="text-sm font-medium @GetLevelColor(skill.Level) px-3 py-1 rounded-full">
                                            @skill.Level
                                        </span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        <div class="h-2.5 rounded-full transition-all duration-1000 ease-out @GetProgressBarColor(skill.Level)" 
                                             style="width: @GetProgressPercentage(skill.Level)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8 text-gray-500">
                            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                            </svg>
                            <p class="text-lg font-medium">No skills found</p>
                            <p class="text-sm">This user hasn't added any skills yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (showProjectsModal)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden">
                <div class="bg-gradient-to-r from-green-500 to-blue-600 p-6 text-white">
                    <div class="flex items-center justify-between">
                        <h3 class="text-2xl font-bold flex items-center">
                            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            Featured Projects
                        </h3>
                        <button @onclick="CloseProjectsModal" class="text-white hover:text-gray-200 transition-colors">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="p-6 max-h-[70vh] overflow-y-auto">
                    @if (ProjectViewModel.IsLoading)
                    {
                        <div class="flex justify-center items-center py-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                            <span class="ml-3 text-gray-600">Loading projects...</span>
                        </div>
                    }
                    else if (ProjectViewModel.Projects?.Any() == true)
                    {
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            @foreach (var project in ProjectViewModel.Projects)
                            {
                                <div class="group bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-all duration-300">
                                    <div class="h-48 overflow-hidden">
                                        <img src="@(string.IsNullOrEmpty(project.ImageUrl) ? "https://via.placeholder.com/400x300/6366f1/ffffff?text=Project" : project.ImageUrl)" 
                                             alt="@project.Title" 
                                             class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500" />
                                    </div>
                                    <div class="p-4">
                                        <h4 class="font-semibold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors duration-200">
                                            @project.Title
                                        </h4>
                                        <p class="text-gray-600 text-sm line-clamp-3">
                                            @project.Description
                                        </p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8 text-gray-500">
                            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            <p class="text-lg font-medium">No projects found</p>
                            <p class="text-sm">This user hasn't added any projects yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool showSkillsModal = false;
    private bool showProjectsModal = false;
    private int selectedUserId = 0;

    protected override async Task OnInitializedAsync()
    {
        await PortfolioUserViewModel.LoadPortfolioUsersAsync();
        LogViewModelState();
    }

    private void LogViewModelState()
    {
        Console.WriteLine($"=== PortfolioUserViewModel State ===");
        Console.WriteLine($"IsLoading: {PortfolioUserViewModel.IsLoading}");
        Console.WriteLine($"ErrorMessage: '{PortfolioUserViewModel.ErrorMessage}'");
        Console.WriteLine($"PortfolioUsers Count: {PortfolioUserViewModel.PortfolioUsers?.Count() ?? 0}");
        Console.WriteLine($"PortfolioUsers IsNull: {PortfolioUserViewModel.PortfolioUsers == null}");
        Console.WriteLine($"=====================================");
    }

    private async Task ViewFullSkills(int userId)
    {
        selectedUserId = userId;
        showSkillsModal = true;
        await SkillViewModel.LoadSkillsByUserAsync(userId);
        StateHasChanged();
    }

    private async Task ViewFullProjects(int userId)
    {
        selectedUserId = userId;
        showProjectsModal = true;
        await ProjectViewModel.LoadProjectsByUserAsync(userId);
        StateHasChanged();
    }

    private void ContactDeveloper(PortfolioUserSummary user)
    {
        // TODO: Implement contact functionality
        // This could open a contact form, email client, or redirect to a contact page
        Console.WriteLine($"Contacting developer: {user.Name}");
    }

    private void CloseSkillsModal()
    {
        showSkillsModal = false;
        SkillViewModel.ClearError();
        StateHasChanged();
    }

    private void CloseProjectsModal()
    {
        showProjectsModal = false;
        ProjectViewModel.ClearError();
        StateHasChanged();
    }

    private async Task ReloadPortfolios()
    {
        Console.WriteLine("=== Reloading Portfolios ===");
        PortfolioUserViewModel.ClearError();
        await PortfolioUserViewModel.LoadPortfolioUsersAsync();
        LogViewModelState();
        StateHasChanged();
    }

    private string GetLevelColor(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => "bg-red-100 text-red-800",
            "novice" => "bg-orange-100 text-orange-800",
            "intermediate" => "bg-yellow-100 text-yellow-800",
            "advanced" => "bg-blue-100 text-blue-800",
            "expert" => "bg-green-100 text-green-800",
            "master" => "bg-purple-100 text-purple-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetProgressBarColor(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => "bg-gradient-to-r from-red-400 to-red-500",
            "novice" => "bg-gradient-to-r from-orange-400 to-orange-500",
            "intermediate" => "bg-gradient-to-r from-yellow-400 to-yellow-500",
            "advanced" => "bg-gradient-to-r from-blue-400 to-blue-500",
            "expert" => "bg-gradient-to-r from-green-400 to-green-500",
            "master" => "bg-gradient-to-r from-purple-400 to-purple-500",
            _ => "bg-gradient-to-r from-gray-400 to-gray-500"
        };
    }

    private int GetProgressPercentage(string level)
    {
        return level?.ToLower() switch
        {
            "beginner" => 20,
            "novice" => 35,
            "intermediate" => 50,
            "advanced" => 70,
            "expert" => 85,
            "master" => 100,
            _ => 0
        };
    }
}
